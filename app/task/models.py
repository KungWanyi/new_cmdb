# -*- coding: utf-8 -*-
# @Time    : 2017/12/4 9:39
# @Author  : caoshuai
# @File    : models.py
# @Software: PyCharm Community Edition

from app import db
from datetime import datetime

class Task(db.Model):
    __tablename__ = 'tasks'

    id = db.Column(db.Integer, primary_key=True)
    project_name = db.Column(db.String(32),unique = True, index = True)
    project_domain = db.Column(db.String(64))
    applicant = db.Column(db.String(16))
    manager = db.Column(db.String(16))
    online_time = db.Column(db.String(32))
    is_test = db.Column(db.Boolean, default = True)
    emergent = db.Column(db.String(16))
    git_url = db.Column(db.String(64))
    start_command = db.Column(db.String(64))
    start_port = db.Column(db.String(16))
    is_public = db.Column(db.Boolean, default = False)
    is_nginx = db.Column(db.Boolean, default = True)
    is_crossdomain = db.Column(db.Boolean, default = False)
    is_mysql = db.Column(db.Boolean, default = False)
    is_postgresql = db.Column(db.Boolean, default = False)
    is_redis = db.Column(db.Boolean, default = False)
    redis_prefix = db.Column(db.String(16))
    is_memcache = db.Column(db.Boolean, default = False)
    memcache_prefix = db.Column(db.String(16))
    is_ssdb = db.Column(db.Boolean, default = False)
    ssdb_prefix = db.Column(db.String(16))
    is_kafka = db.Column(db.Boolean, default=False)
    kafka_prefix = db.Column(db.String(16))
    is_rabbitMQ = db.Column(db.Boolean, default=False)
    host_type = db.Column(db.String(32))
    host_configuration = db.Column(db.String(128))
    check_status = db.Column(db.String(16))
    publisher = db.Column(db.String(16))
    checker = db.Column(db.String(16))
    is_daemon = db.Column(db.Boolean, default=False)
    daemon_mode = db.Column(db.String(64))
    is_test_url = db.Column(db.String(32))
    test_url = db.Column(db.String(64))
    is_slb = db.Column(db.Boolean, default=False)
    ha_special = db.Column(db.String(64))
    service_type = db.Column(db.String(16))
    is_log = db.Column(db.Boolean, default=True)
    log_position = db.Column(db.String(64))
    log_special_position = db.Column(db.String(64))
    is_log_cut = db.Column(db.Boolean, default=True)
    log_clear = db.Column(db.String(64))
    is_log_cut_by_operation = db.Column(db.Boolean, default=False)
    comment = db.Column(db.Text)
    attachment = db.Column(db.String(64))
    task_flows = db.relationship('TaskFlow', backref='tasks', lazy='dynamic')
    project = db.relationship("Project", backref="task", uselist=False)
    create_time = db.Column(db.DateTime, default = datetime.now)

class TaskTemplate(db.Model):
    __tablename__ = 'task_templates'

    id = db.Column(db.Integer, primary_key=True)
    template_name = db.Column(db.String(32),unique = True, index = True)
    template_owner = db.Column(db.String(16))
    project_name = db.Column(db.String(32))
    project_domain = db.Column(db.String(64))
    applicant = db.Column(db.String(16))
    manager = db.Column(db.String(16))
    online_time = db.Column(db.String(32))
    is_test = db.Column(db.Boolean, default=True)
    emergent = db.Column(db.String(16))
    git_url = db.Column(db.String(64))
    start_command = db.Column(db.String(64))
    start_port = db.Column(db.String(16))
    is_public = db.Column(db.Boolean, default=False)
    is_nginx = db.Column(db.Boolean, default=True)
    is_crossdomain = db.Column(db.Boolean, default=False)
    is_mysql = db.Column(db.Boolean, default=False)
    is_postgresql = db.Column(db.Boolean, default=False)
    is_redis = db.Column(db.Boolean, default=False)
    redis_prefix = db.Column(db.String(16))
    is_memcache = db.Column(db.Boolean, default=False)
    memcache_prefix = db.Column(db.String(16))
    is_ssdb = db.Column(db.Boolean, default=False)
    ssdb_prefix = db.Column(db.String(16))
    is_kafka = db.Column(db.Boolean, default=False)
    kafka_prefix = db.Column(db.String(16))
    is_rabbitMQ = db.Column(db.Boolean, default=False)
    host_type = db.Column(db.String(32))
    host_configuration = db.Column(db.String(128))
    check_status = db.Column(db.String(16))
    publisher = db.Column(db.String(16))
    checker = db.Column(db.String(16))
    is_daemon = db.Column(db.Boolean, default=False)
    daemon_mode = db.Column(db.String(64))
    is_test_url = db.Column(db.Boolean, default=False)
    test_url = db.Column(db.String(64))
    is_slb = db.Column(db.Boolean, default=False)
    ha_special = db.Column(db.String(64))
    service_type = db.Column(db.String(16))
    is_log = db.Column(db.Boolean, default=True)
    log_position = db.Column(db.String(64))
    log_special_position = db.Column(db.String(64))
    is_log_cut = db.Column(db.Boolean, default=True)
    log_clear = db.Column(db.String(64))
    is_log_cut_by_operation = db.Column(db.Boolean, default=False)
    comment = db.Column(db.Text)
    attachment = db.Column(db.String(64))
    create_time = db.Column(db.DateTime, default=datetime.now)

class TaskFlow(db.Model):
    __tablename__ = 'task_flow'

    id = db.Column(db.Integer, primary_key = True)
    task_name = db.Column(db.String(32))
    operator = db.Column(db.String(32))
    applicant = db.Column(db.String(32))
    task_status = db.Column(db.String(16))
    comment = db.Column(db.Text)
    task_id = db.Column(db.Integer, db.ForeignKey('tasks.id'))
    create_time = db.Column(db.DateTime, default = datetime.now)

class Project(db.Model):
    __tablename__ = 'projects'

    id = db.Column(db.Integer, primary_key = True)
    is_front_cdn = db.Column(db.Boolean, default = False)
    is_back_cdn = db.Column(db.Boolean, default = False)
    front_cache_method = db.Column(db.String(128))
    back_cache_method = db.Column(db.String(128))
    front_cdn_manufacturer = db.Column(db.String(32))
    back_cdn_manufacturer = db.Column(db.String(32))
    host_ip = db.Column(db.String(32))
    db_ip = db.Column(db.String(32))
    db_name = db.Column(db.String(16))
    redis_ip = db.Column(db.String(32))
    redis_port = db.Column(db.String(16))
    memcache_ip = db.Column(db.String(32))
    memcache_port = db.Column(db.String(16))
    ssdb_ip = db.Column(db.String(32))
    ssdb_port = db.Column(db.String(16))
    kafka_ip = db.Column(db.String(32))
    kafka_port = db.Column(db.String(16))
    rabbitMQ_ip = db.Column(db.String(32))
    rabbitMQ_port = db.Column(db.String(16))
    comment = db.Column(db.Text())
    task_id = db.Column(db.Integer, db.ForeignKey('tasks.id'))
    create_time = db.Column(db.DateTime, default=datetime.now)





